//! This benchmark tests the performance of the ERC20 contract on the EVM.
//! Performing benches on tasks such as deployment, transfer and balanceOf.
use criterion::{Criterion, criterion_group, criterion_main};

use revm::{
    ExecuteCommitEvm, MainBuilder, MainContext,
    context::Context,
    context_interface::result::{ExecutionResult, Output},
    database::CacheDB,
    database_interface::EmptyDB,
    handler::EvmTr,
    primitives::{Address, Bytes, TxKind, U256, address, hex},
};
use alloy_sol_types::{sol, SolCall};

const FROM: Address = address!("5B38Da6a701c568545dCfcB03FcB875f56beddC4");
const TO: Address = address!("Ab8483F64d9C6d1EcF9b849Ae677dD3315835cb2");

fn erc20_bytescode_and_initcode() -> Bytes {
    // Containing the InitCode and Runtime Code
    hex::decode(
            // solc v0.8.20; solc Counter.sol --via-ir --optimize --bin
            "0x608060405234801561000f575f80fd5b5060405161199c38038061199c83398181016040528101906100319190610303565b835f908161003f91906105a3565b50826001908161004f91906105a3565b508160025f6101000a81548160ff021916908360ff16021790555060025f9054906101000a900460ff1660ff16600a61008891906107ce565b816100939190610818565b60038190555060035460045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60035460405161013c9190610868565b60405180910390a350505050610881565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6101ac82610166565b810181811067ffffffffffffffff821117156101cb576101ca610176565b5b80604052505050565b5f6101dd61014d565b90506101e982826101a3565b919050565b5f67ffffffffffffffff82111561020857610207610176565b5b61021182610166565b9050602081019050919050565b8281835e5f83830152505050565b5f61023e610239846101ee565b6101d4565b90508281526020810184848401111561025a57610259610162565b5b61026584828561021e565b509392505050565b5f82601f8301126102815761028061015e565b5b815161029184826020860161022c565b91505092915050565b5f60ff82169050919050565b6102af8161029a565b81146102b9575f80fd5b50565b5f815190506102ca816102a6565b92915050565b5f819050919050565b6102e2816102d0565b81146102ec575f80fd5b50565b5f815190506102fd816102d9565b92915050565b5f805f806080858703121561031b5761031a610156565b5b5f85015167ffffffffffffffff8111156103385761033761015a565b5b6103448782880161026d565b945050602085015167ffffffffffffffff8111156103655761036461015a565b5b6103718782880161026d565b9350506040610382878288016102bc565b9250506060610393878288016102ef565b91505092959194509250565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806103ed57607f821691505b602082108103610400576103ff6103a9565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610427565b61046c8683610427565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6104a76104a261049d846102d0565b610484565b6102d0565b9050919050565b5f819050919050565b6104c08361048d565b6104d46104cc826104ae565b848454610433565b825550505050565b5f90565b6104e86104dc565b6104f38184846104b7565b505050565b5b818110156105165761050b5f826104e0565b6001810190506104f9565b5050565b601f82111561055b5761052c81610406565b61053584610418565b81016020851015610544578190505b61055861055085610418565b8301826104f8565b50505b505050565b5f82821c905092915050565b5f61057b5f1984600802610560565b1980831691505092915050565b5f610593838361056c565b9150826002028217905092915050565b6105ac8261039f565b67ffffffffffffffff8111156105c5576105c4610176565b5b6105cf82546103d6565b6105da82828561051a565b5f60209050601f83116001811461060b575f84156105f9578287015190505b6106038582610588565b86555061066a565b601f19841661061986610406565b5f5b828110156106405784890151825560018201915060208501945060208101905061061b565b8683101561065d5784890151610659601f89168261056c565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156106f4578086048111156106d0576106cf610672565b5b60018516156106df5780820291505b80810290506106ed8561069f565b94506106b4565b94509492505050565b5f8261070c57600190506107c7565b81610719575f90506107c7565b816001811461072f576002811461073957610768565b60019150506107c7565b60ff84111561074b5761074a610672565b5b8360020a91508482111561076257610761610672565b5b506107c7565b5060208310610133831016604e8410600b841016171561079d5782820a90508381111561079857610797610672565b5b6107c7565b6107aa84848460016106ab565b925090508184048111156107c1576107c0610672565b5b81810290505b9392505050565b5f6107d8826102d0565b91506107e3836102d0565b92506108107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846106fd565b905092915050565b5f610822826102d0565b915061082d836102d0565b925082820261083b816102d0565b9150828204841483151761085257610851610672565b5b5092915050565b610862816102d0565b82525050565b5f60208201905061087b5f830184610859565b92915050565b61110e8061088e5f395ff3fe608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063313ce56711610064578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610091565b806306fdde0314610095578063095ea7b3146100b357806318160ddd146100e357806323b872dd14610101575b5f80fd5b61009d6101fd565b6040516100aa9190610aeb565b60405180910390f35b6100cd60048036038101906100c89190610b9c565b610288565b6040516100da9190610bf4565b60405180910390f35b6100eb6103e3565b6040516100f89190610c1c565b60405180910390f35b61011b60048036038101906101169190610c35565b6103e9565b6040516101289190610bf4565b60405180910390f35b6101396107a4565b6040516101469190610ca0565b60405180910390f35b61016960048036038101906101649190610cb9565b6107b6565b6040516101769190610c1c565b60405180910390f35b6101876107cb565b6040516101949190610aeb565b60405180910390f35b6101b760048036038101906101b29190610b9c565b610857565b6040516101c49190610bf4565b60405180910390f35b6101e760048036038101906101e29190610ce4565b610a5b565b6040516101f49190610c1c565b60405180910390f35b5f805461020990610d4f565b80601f016020809104026020016040519081016040528092919081815260200182805461023590610d4f565b80156102805780601f1061025757610100808354040283529160200191610280565b820191905f5260205f20905b81548152906001019060200180831161026357829003601f168201915b505050505081565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ee90610def565b60405180910390fd5b8160055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103d19190610c1c565b60405180910390a36001905092915050565b60035481565b5f8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90610e7d565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90610f0b565b60405180910390fd5b8160045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610f99565b60405180910390fd5b5f60055f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc90611027565b60405180910390fd5b82816106119190611072565b60055f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508260045f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546106d99190611072565b925050819055508260045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461072c91906110a5565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516107909190610c1c565b60405180910390a360019150509392505050565b60025f9054906101000a900460ff1681565b6004602052805f5260405f205f915090505481565b600180546107d890610d4f565b80601f016020809104026020016040519081016040528092919081815260200182805461080490610d4f565b801561084f5780601f106108265761010080835404028352916020019161084f565b820191905f5260205f20905b81548152906001019060200180831161083257829003601f168201915b505050505081565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90610f0b565b60405180910390fd5b8160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d90610f99565b60405180910390fd5b8160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109929190611072565b925050819055508160045f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546109e591906110a5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a499190610c1c565b60405180910390a36001905092915050565b6005602052815f5260405f20602052805f5260405f205f91509150505481565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610abd82610a7b565b610ac78185610a85565b9350610ad7818560208601610a95565b610ae081610aa3565b840191505092915050565b5f6020820190508181035f830152610b038184610ab3565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b3882610b0f565b9050919050565b610b4881610b2e565b8114610b52575f80fd5b50565b5f81359050610b6381610b3f565b92915050565b5f819050919050565b610b7b81610b69565b8114610b85575f80fd5b50565b5f81359050610b9681610b72565b92915050565b5f8060408385031215610bb257610bb1610b0b565b5b5f610bbf85828601610b55565b9250506020610bd085828601610b88565b9150509250929050565b5f8115159050919050565b610bee81610bda565b82525050565b5f602082019050610c075f830184610be5565b92915050565b610c1681610b69565b82525050565b5f602082019050610c2f5f830184610c0d565b92915050565b5f805f60608486031215610c4c57610c4b610b0b565b5b5f610c5986828701610b55565b9350506020610c6a86828701610b55565b9250506040610c7b86828701610b88565b9150509250925092565b5f60ff82169050919050565b610c9a81610c85565b82525050565b5f602082019050610cb35f830184610c91565b92915050565b5f60208284031215610cce57610ccd610b0b565b5b5f610cdb84828501610b55565b91505092915050565b5f8060408385031215610cfa57610cf9610b0b565b5b5f610d0785828601610b55565b9250506020610d1885828601610b55565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610d6657607f821691505b602082108103610d7957610d78610d22565b5b50919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f610dd9602283610a85565b9150610de482610d7f565b604082019050919050565b5f6020820190508181035f830152610e0681610dcd565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f610e67602583610a85565b9150610e7282610e0d565b604082019050919050565b5f6020820190508181035f830152610e9481610e5b565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f610ef5602383610a85565b9150610f0082610e9b565b604082019050919050565b5f6020820190508181035f830152610f2281610ee9565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f610f83602683610a85565b9150610f8e82610f29565b604082019050919050565b5f6020820190508181035f830152610fb081610f77565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f611011602883610a85565b915061101c82610fb7565b604082019050919050565b5f6020820190508181035f83015261103e81611005565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61107c82610b69565b915061108783610b69565b925082820390508181111561109f5761109e611045565b5b92915050565b5f6110af82610b69565b91506110ba83610b69565b92508282019050808211156110d2576110d1611045565b5b9291505056fea264697066735822122006b55d3f523e8b32c52abddb7c1730ff0f2c4f0486d70b3d42c50e6eb0714bae64736f6c634300081a0033000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000008524953435645564d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005525645564d000000000000000000000000000000000000000000000000000000"
        ).unwrap().into()
}

fn bench_erc20_deployment(c: &mut Criterion) {
    c.bench_function("EVM: Bench ERC20 Deployment", |b| {
        b.iter(|| {
            let bytecode: Bytes = erc20_bytescode_and_initcode();
            let ctx = Context::mainnet()
                .modify_tx_chained(|tx| {
                    tx.caller = FROM;
                    tx.kind = TxKind::Create;
                    tx.data = bytecode.clone();
                    tx.value = U256::from(0);
                })
                .with_db(CacheDB::<EmptyDB>::default());

            let mut evm = ctx.build_mainnet();
            let ref_tx = evm.replay_commit().unwrap();
            let ExecutionResult::Success {
                output: Output::Create(_, Some(_address)),
                ..
            } = ref_tx
            else {
                panic!("Failed to create contract: {ref_tx:#?}");
            };
        })
    });
}

fn bench_erc20_transfer(c: &mut Criterion) {
    c.bench_function("EVM: Bench ERC20 Transfer", |b| b.iter(|| {
        let bytecode: Bytes = erc20_bytescode_and_initcode();
        let ctx = Context::mainnet()
            .modify_tx_chained(|tx| {
                tx.caller = FROM;
                tx.kind = TxKind::Create;
                tx.data = bytecode.clone();
                tx.value = U256::from(0);
            })
            .with_db(CacheDB::<EmptyDB>::default());
    
        let mut evm = ctx.build_mainnet();
        let ref_tx = evm.replay_commit().unwrap();
        let ExecutionResult::Success {
            output: Output::Create(_, Some(token_address)),
            ..
        } = ref_tx
        else {
            panic!("Failed to create contract: {ref_tx:#?}");
        };
        
        sol! {
            function transfer(address to, uint amount) external returns (bool);
        }
        
        let encoded = transferCall { to: TO, amount: U256::from(100) }.abi_encode();
        
        evm.ctx().modify_tx(|tx| {
            tx.nonce = 1;
            tx.caller = FROM;
            tx.kind = TxKind::Call(token_address);
            tx.data = encoded.into();
            tx.value = U256::from(0);
        });
        
        let ref_tx = evm.replay_commit().unwrap();
        
        let ExecutionResult::Success {
            output: Output::Call(_return_bytes),
            ..
        } = ref_tx
        else {
            panic!("Failed to create contract: {ref_tx:#?}");
        };
    }));
}

fn bench_erc20_balance_of(c: &mut Criterion) {
    c.bench_function("EVM: Bench ERC20 Transfer", |b| b.iter(|| {
        let bytecode: Bytes = erc20_bytescode_and_initcode();
        let ctx = Context::mainnet()
            .modify_tx_chained(|tx| {
                tx.caller = FROM;
                tx.kind = TxKind::Create;
                tx.data = bytecode.clone();
                tx.value = U256::from(0);
            })
            .with_db(CacheDB::<EmptyDB>::default());
        
        let mut evm = ctx.build_mainnet();
        
        let ref_tx = evm.replay_commit().unwrap();
        let ExecutionResult::Success {
            output: Output::Create(_, Some(token_address)),
            ..
        } = ref_tx
        else {
            panic!("Failed to create contract: {ref_tx:#?}");
        };
        
        sol! {
            function balanceOf(address owner) external view returns (uint);
        }
        
        let encoded = balanceOfCall { owner: FROM }.abi_encode();
        
        evm.ctx().modify_tx(|tx| {
            tx.nonce = 1;
            tx.caller = FROM;
            tx.kind = TxKind::Call(token_address);
            tx.data = encoded.into();
            tx.value = U256::from(0);
        });
        
        let ref_tx = evm.replay_commit().unwrap();
        
        let ExecutionResult::Success {
            output: Output::Call(_return_bytes),
            ..
        } = ref_tx
        else {
            panic!("Failed to create contract: {ref_tx:#?}");
        };
    }));
}

criterion_group!(
    benches, 
    bench_erc20_deployment, 
    bench_erc20_transfer,
    bench_erc20_balance_of,
);
criterion_main!(benches);
